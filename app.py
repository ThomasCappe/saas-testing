# Code complet de l'application avec synth√®se du march√© local, sans carte interactive

import streamlit as st
import pandas as pd
import os
import requests
from math import radians, cos, sin, sqrt, atan2
from time import sleep
import matplotlib.pyplot as plt

st.set_page_config(menu_items=None,
                 initial_sidebar_state="collapsed",page_title="Estimation Immo France", layout="wide")
st.title("üìç Estimation gratuite de votre bien en France")
st.write("Obtenez une estimation gratuite en 1 minute, sans engagement.")

# Utilitaires

def haversine(lat1, lon1, lat2, lon2):
    R = 6371
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c

def autocomplete_address(query):
    try:
        url = f"https://api-adresse.data.gouv.fr/search/?q={query}&limit=5"
        response = requests.get(url)
        results = response.json()["features"]
        return [r["properties"]["label"] for r in results]
    except:
        return []

def get_postal_code_and_coords(addr):
    try:
        url = f"https://api-adresse.data.gouv.fr/search/?q={addr}&limit=1"
        response = requests.get(url)
        props = response.json()['features'][0]['properties']
        coords = response.json()['features'][0]['geometry']['coordinates']
        return props['postcode'], coords[1], coords[0]
    except:
        return None, None, None

def geocode_address(voie, commune):
    try:
        url = f"https://api-adresse.data.gouv.fr/search/?q={voie},{commune}&limit=1"
        response = requests.get(url)
        coords = response.json()['features'][0]['geometry']['coordinates']
        return coords[1], coords[0]
    except:
        return None, None

def get_local_dvf_estimation(cp, type_local, selected_years, user_lat, user_lon, rayon_km):
    prix_m2_list, rows = [], []
    for year in selected_years:
        fn = f"ValeursFoncieres-{year}.txt"
        if not os.path.exists(fn):
            continue
        cols_needed = ["Code postal", "Type local", "Nature mutation", "Surface reelle bati", "Valeur fonciere", "Voie", "Commune", "Date mutation"]
        df = pd.read_csv(fn, sep="|", usecols=lambda c: c in cols_needed, dtype=str)
        df = df[df["Code postal"] == cp]
        df = df[df["Type local"] == type_local]
        df = df[df["Nature mutation"] == "Vente"]
        df = df[df["Surface reelle bati"].notnull() & df["Valeur fonciere"].notnull()]
        for _, r in df.iterrows():
            try:
                val = float(r["Valeur fonciere"].replace(",", "."))
                surf = float(r["Surface reelle bati"].replace(",", "."))
                lat, lon = geocode_address(r.get("Voie", ""), r.get("Commune", ""))
                if not lat or not lon:
                    continue
                dist = haversine(user_lat, user_lon, lat, lon)
                if dist <= rayon_km:
                    prix_m2 = val / surf
                    prix_m2_list.append(prix_m2)
                    rows.append({
                        "Adresse": f"{r.get('Voie', '')}, {r.get('Commune', '')}",
                        "Prix/m¬≤": round(prix_m2, 2),
                        "Surface (m¬≤)": surf,
                        "Valeur fonci√®re (‚Ç¨)": val,
                        "Distance (km)": round(dist, 2),
                        "Date mutation": r.get("Date mutation", "")
                    })
            except:
                continue
    if prix_m2_list:
        prix_m2_series = pd.Series(prix_m2_list)
        q1 = prix_m2_series.quantile(0.10)
        q9 = prix_m2_series.quantile(0.90)
        filtered = prix_m2_series[(prix_m2_series >= q1) & (prix_m2_series <= q9)]
        if not filtered.empty:
            prix_m2_list = filtered.tolist()
        return sum(prix_m2_list)/len(prix_m2_list), len(prix_m2_list), pd.DataFrame(rows)
    return None, 0, pd.DataFrame()

def get_nearby_pois(lat, lon, radius=2000):
    query = f"""
    [out:json];
    (
      node["shop"~"bakery|supermarket"](around:{radius},{lat},{lon});
      node["amenity"~"pharmacy|school|station"](around:{radius},{lat},{lon});
    );
    out;
    """
    url = "http://overpass-api.de/api/interpreter"
    resp = requests.get(url, params={"data": query})
    return resp.json()

TYPES_FR = {
    "bakery": "Boulangerie",
    "supermarket": "Supermarch√©",
    "pharmacy": "Pharmacie",
    "school": "√âcole",
    "station": "Gare",
    "default": "Commerce",
    "Charging_Station": "Borne de recharge",
    "Driving_School": "Auto-Ecole",
    "Music_School": "Ecole de musique",
}

# Interface utilisateur ‚Äî formulaire et estimation

addr_input = st.text_input("Adresse du bien")
suggestions = autocomplete_address(addr_input) if addr_input else []
adresse = st.selectbox("Adresse exacte", suggestions) if suggestions else ""

with st.form("form"):
    prix_voulu = st.number_input("Prix souhait√© par le client (‚Ç¨)", min_value=0, step=1000)
    col1, col2 = st.columns(2)
    with col1:
        nom = st.text_input("Nom")
        email = st.text_input("Email")
        surface = st.number_input("Surface (m¬≤)", 10, 1000)
    with col2:
        tel = st.text_input("T√©l√©phone")
        type_bien = st.selectbox("Type", ["Appartement", "Maison"])
        action = st.selectbox("Projet", ["Vendre", "Louer", "Estimer seulement"])

    condition = st.radio("√âtat du bien", ["Neuf ou r√©nov√©", "√Ä r√©nover"])
    years = st.multiselect("Ann√©es DVF", [2024, 2023, 2022, 2021], [2024, 2023])
    rayon = st.slider("Rayon autour (km)", 0.5, 2.0, 1.0, step=0.1)
    submit = st.form_submit_button("üì® Obtenir mon estimation")

leads_file = "leads.csv"
if not os.path.exists(leads_file):
    pd.DataFrame(columns=["Nom", "Email", "T√©l√©phone", "Adresse", "Type", "Projet", "√âtat", "Surface", "Estimation (‚Ç¨)", "Prix souhait√© (‚Ç¨)"]).to_csv(leads_file, index=False)

if submit and adresse:
    estim = None
    lead = pd.DataFrame([{
        "Nom": nom,
        "Email": email,
        "T√©l√©phone": tel,
        "Adresse": adresse,
        "Type": type_bien,
        "Projet": action,
        "√âtat": condition,
        "Surface": surface,
        "Estimation (‚Ç¨)": round(estim) if estim else None,
        "Prix souhait√© (‚Ç¨)": prix_voulu
    }])
    lead.to_csv(leads_file, mode='a', header=False, index=False)
    progress = st.progress(0)
    with st.spinner("Chargement en cours..."):
        progress.progress(10)
        cp_str, lat, lon = get_postal_code_and_coords(adresse)
        progress.progress(30)
        cp = str(cp_str) if cp_str else None
        if cp and lat and lon:
            progress.progress(50)
            prix_m2, nb, df = get_local_dvf_estimation(cp, type_bien, years, lat, lon, rayon)
            progress.progress(70)
            if prix_m2:
                estim = surface * prix_m2
                bas, haut = (estim*0.9, estim) if condition == "√Ä r√©nover" else (estim, estim*1.1)
                st.subheader(f"Estimation entre {round(bas)} ‚Ç¨ et {round(haut)} ‚Ç¨")
                st.caption(f"Bas√© sur {nb} ventes similaires ¬∑ Prix moyen : {round(prix_m2)} ‚Ç¨/m¬≤")
                st.info("Cette estimation est fournie √† titre indicatif, bas√©e uniquement sur les ventes pass√©es.")
                st.warning("Pour une estimation fiable et personnalis√©e, une expertise par un professionnel de l'immobilier est recommand√©e.")

                frais_ancien = estim * 0.075
                frais_neuf = estim * 0.03
                st.markdown("**Frais de notaire estim√©s :**")
                st.markdown(f"‚Ä¢ Ancien : **{round(frais_ancien)} ‚Ç¨** (7.5%)")
                st.markdown(f"‚Ä¢ Neuf : **{round(frais_neuf)} ‚Ç¨** (3%)")

                if action == "Louer":
                    loyer_m2 = 12
                    loyer_mensuel = surface * loyer_m2
                    rendement = (loyer_mensuel * 12) / estim * 100
                    st.markdown(f"**Loyer estim√© : {round(loyer_mensuel)} ‚Ç¨/mois**")
                    st.markdown(f"**Rendement brut : {round(rendement, 2)} %**")

                with st.expander("Synth√®se du march√© local"):
                    if not df.empty:
                        min_m2 = df["Prix/m¬≤"].min()
                        max_m2 = df["Prix/m¬≤"].max()
                        ecart_type = df["Prix/m¬≤"].std()
                        derniere = df["Date mutation"].dropna().max()
                        df['Ann√©e'] = pd.to_datetime(df['Date mutation'], errors='coerce').dt.year
                        yearly = df.groupby("Ann√©e")["Prix/m¬≤"].mean().dropna()
                        tendance = ""
                        if len(yearly) >= 2:
                            delta = yearly.iloc[-1] - yearly.iloc[0]
                            if delta > 50:
                                tendance = "Hausse des prix"
                            elif delta < -50:
                                tendance = "Baisse des prix"
                            else:
                                tendance = "Prix stables"

                        st.markdown(f"**Date de la derni√®re vente :** {derniere}")
                        st.markdown(f"**Fourchette observ√©e :** {round(min_m2)} ‚Ç¨/m¬≤ √† {round(max_m2)} ‚Ç¨/m¬≤")
                        st.markdown(f"**√âcart-type :** {round(ecart_type)} ‚Ç¨/m¬≤")
                        st.markdown(f"**Tendance :** {tendance}")

                with st.expander("üìä D√©tails des ventes"):
                    st.dataframe(df, use_container_width=True)

                df_temp = df.copy()
                df_temp["Ann√©e"] = pd.to_datetime(df_temp["Date mutation"], errors='coerce').dt.year
                moy = df_temp.groupby("Ann√©e")["Prix/m¬≤"].mean()

                st.subheader("üìâ Analyse")
                st.subheader("üìâ √âvolution des prix et r√©partition des ventes")
                col1, col2 = st.columns(2)
                with col1:
                    fig1, ax1 = plt.subplots(figsize=(5, 3))
                    moy.plot(marker="o", ax=ax1)
                    ax1.set_ylabel("Prix moyen (‚Ç¨/m¬≤)")
                    ax1.set_title("Prix moyen par an")
                    st.pyplot(fig1)

                with col2:
                    fig2, ax2 = plt.subplots(figsize=(5, 3))
                    df["Prix/m¬≤"].hist(bins=20, ax=ax2, color="#69b3a2")
                    ax2.set_xlabel("‚Ç¨/m¬≤")
                    ax2.set_ylabel("Nombre de ventes")
                    ax2.set_title("Distribution des ventes")
                    st.pyplot(fig2)

                st.subheader("üõçÔ∏è Commerces √† proximit√©")
                progress.progress(90)
                data = get_nearby_pois(lat, lon)
                pois = []
                for el in data["elements"]:
                    t = el.get("tags", {})
                    cat = t.get("shop") or t.get("amenity", "default")
                    name = t.get("name") or TYPES_FR.get(cat, cat.title())
                    dist = round(haversine(lat, lon, el["lat"], el["lon"]), 2)
                    pois.append({"Nom": name, "Type": TYPES_FR.get(cat, cat.title()), "Distance (km)": dist})

                progress.progress(100)
                if pois:
                    df_pois = pd.DataFrame(pois).sort_values("Distance (km)")
                    st.dataframe(df_pois, use_container_width=True)
                    moyenne = sum(p["Distance (km)"] for p in pois) / len(pois)
                    st.markdown(f"**Score de proximit√© :** {round(moyenne,2)} km")
                else:
                    st.info("Aucun commerce trouv√© dans le rayon")
        else:
            st.error("Adresse non trouv√©e")

# Interface admin pour visualiser les leads
if st.sidebar.checkbox("üõ†Ô∏è Mode Admin"):
    password = st.sidebar.text_input("Mot de passe", type="password")
    if password == "admin123":
        st.header("üìã Liste des contacts clients")
        if os.path.exists(leads_file):
            df_leads = pd.read_csv(leads_file)
            st.dataframe(df_leads, use_container_width=True)
            st.download_button("‚¨áÔ∏è T√©l√©charger les leads", df_leads.to_csv(index=False), file_name="leads.csv")
        else:
            st.info("Aucun contact enregistr√© pour le moment.")
    else:
        st.sidebar.warning("Mot de passe incorrect.")
